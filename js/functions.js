let defaults = {
	size: 1,
	pageShow: 3,
	page: 1,
	limit: 5,
	boundary: true
}

function renderPublications(publications) {
	$("#publications").empty();

	publications.forEach(publication => {
		$("#publications").append(`
			<div class="card mb-3">
			<div class="card-body">
				<h5 class="card-title">${publication.title}</h5>
				<h6 class="card-subtitle mb-2 text-muted">${publication["publication-date"]}</h6>
				<p class="card-text">${publication.authors}</p>
				<a href="https://doi.org/${publication.identifier}" class="card-link">doi:${publication.identifier}</a>
				<div data-badge-type="2" data-doi="${publication.identifier}" data-hide-no-mentions="true" class="altmetric-embed text-end"></div>
			</div>
		</div>
	   `);
	})

	_altmetric_embed_init();
}

function pagePublications(model, page_number) {
	renderPublications(model.publications.slice((page_number - 1) * defaults.limit, page_number * defaults.limit));
}

function renderChart(element, type, labels, data_label, data_datasets) {
	let chartStatus = Chart.getChart(element);
	if (chartStatus != undefined) {
		chartStatus.destroy();
	}

	let ctx = document.getElementById(element);
	myChart = new Chart(ctx, {
		type: type,
		data: {
			labels: labels,
			datasets: [{
				label: data_label,
				data: data_datasets,
				backgroundColor: poolColors(data_datasets.length),
				borderColor: poolColors(data_datasets.length),
				borderWidth: 1
			}]
		},
		options: {
			responsive: true,
			maintainAspectRatio: false
		}
	});
}

function renderAccessibility(model) {
	$("#accessibility-placeholder").empty();
	$("#accessibility-placeholder").html(`
	<h2>Accessibility</h2>
		<div class="mb-3">
		Through searching in reference databases we have found <span class="publications-total badge bg-primary"></span>
		publications that relate to this query, and have authors from our institution. <span class="oa-total badge bg-primary"></span>
		of these are available with Open Access.
		</div>
		<div class="d-flex justify-content-center mb-3">
			<canvas id="accessibility-graph" style="position: relative; width="200vw" height="200vh"></canvas>
		</div>
	`);
	
	model["open-access"] = _.groupBy(model.publications, publication => publication["open-access"]);

	$(".publications-total").text(model["total-results"]);
	$(".oa-total").text(model["open-access"].true.length);

	renderChart("accessibility-graph", "doughnut", ["Open access", "Non open access"], "# of Open Access", [model["open-access"].true.length, model["open-access"].false?.length || 0])
}

function renderVisibilityAndSocietalImpact(model) {
	$("#visibility-placeholder").empty();
	$("#visibility-placeholder").html(`
		<h2>Visibility and societal impact</h2>
		<div class="mb-3">
		The general public often accesses knowledge generated by our institutionthrough the news or social media. The diagram below shows <span class="total-mentions badge bg-primary"></span>
		registered mentions of the publications in online media other than scientific journals, as captured by the Altmetric Explorer database. Altmetric also shows references to our publications
		in policy documents, patents and other sources like Wikipedia, and thus gives an impression of the visibility and societal impact of our research.
		</div>
		<div class="d-flex justify-content-center mb-3">
			<canvas id="overall-mentions-graph" style="position: relative; width="600vw" height="400wh"></canvas>
		</div>
	`);

   let total_mentions = 0;

   model["overall-mentions"] = model.publications.flatMap(p => p.mentions).reduce((result, current) => {
	   Object.entries(current).map(entry => {
		   const [key, value] = entry;
		   if (result[key] == null) {
			   result[key] = 0;
		   }
		   result[key] += value;
		   total_mentions += value;
	   });
	   return result;
   }, {});

   model["total-mentions"] = total_mentions;
   $(".total-mentions").text(model["total-mentions"]);
	
	renderChart("overall-mentions-graph", "bar", Object.keys(model['overall-mentions']), 'Total mentions by source', Object.values(model['overall-mentions']))
}

function renderCollaborations(model) {
	$("#collaborations-placeholder").empty();
	$("#collaborations-placeholder").html(`
		<h2>Collaboration</h2>
		<div class="mb-3">
   		Our institutions researchers collaborate with researchers at universities and organisations all over the world.
		The picture shows the affiliations of co-authors of the publications in the list.
   		</div>
		<div class="d-flex justify-content-center mb-3">
			<canvas id="affiliations-graph" style="position: relative; width="600vw" height="400vh"></canvas>
		</div>
	`);

   let all_affiliations = model.publications.flatMap(p => p.affiliations).reduce((result, current) => {
		if (result[current] == null) {
			result[current] = 0;
		}
		result[current]++;
		return result;
	}, {});

	model["affiliations"] = _.chain(all_affiliations).map((value, key) => ({ value, key })).sortBy("value").reverse().drop(1).take(10).reduce((acc, item) => ({ ...acc, [item.key]: item.value }), {}).value();

	renderChart("affiliations-graph", "polarArea", Object.keys(model['affiliations']), 'Total affiliations', Object.values(model['affiliations']))
}

function renderFunders(model) {
	$("#funders-placeholder").empty();
	$("#funders-placeholder").html(`
		<h2>Funders</h2>
		<div class="mb-3">
		Researchers at our institution have received funding from the following funders.
		</div>
		<div class="d-flex justify-content-center mb-3">
			<canvas id="funders-graph" style="position: relative; width="600" height="400"></canvas>
		</div>
	`);

   let all_funders = model.publications.flatMap(p => p.funders).reduce((result, current) => {
		if (result[current] == null) {
			result[current] = 0;
		}
		result[current]++;
		return result;
	}, {});

	model["funders"] = _.chain(all_funders).map((value, key) => ({ value, key })).sortBy("value").reverse().take(10).reduce((acc, item) => ({ ...acc, [item.key]: item.value }), {}).value();

	renderChart("funders-graph", "polarArea", Object.keys(model['funders']), 'Total funders', Object.values(model['funders']))
}

function convertToPublication(model, result) {
	if(model["publications"] == null) {
		model["publications"] = []
	}
	result.data.forEach(element => {
		let institutional_authors = []
		if (element.relationships.hasOwnProperty("institutional-authors")) {
			institutional_authors = element.relationships['institutional-authors'].map(x => {
				let displayName = result.included.find(author => author.id == x.id).attributes.name
				let name = displayName.split(",")
				return name[1] + " " + name[0]
			})
		}
		let affiliations = []
		if (element.relationships.hasOwnProperty("affiliations")) {
			affiliations = element.relationships['affiliations'].map(x => {
				return result.included.find(a => a.id == x.id).attributes.name
			})
		}
		let funders = []
		if (element.relationships.hasOwnProperty("funders")) {
			funders = element.relationships['funders'].map(x => {
				return result.included.find(a => a.id == x.id).attributes.name
			})
		}
		model.publications.push({
			"id": element.id,
			"authors": institutional_authors,
			"identifier": element.attributes.identifiers.hasOwnProperty("dois") ? element.attributes.identifiers.dois[0] : null,
			"affiliations": affiliations,
			"funders" : funders,
			"title": element.attributes.title,
			"publication-date": element.attributes["publication-date"],
			"open-access": element.attributes["oa-status"],
			"mentions": element.attributes.mentions,
		});
	});
}

async function makePagedRequest(url, callback) {
	const model = {
		"description": "",
		"total-results": 0,
		"total-pages": 0
	};
	let current_page = 1;

	async function getNextPage(url){
		const response = await fetch(`${url}&page[number]=${current_page}`);
		const result = await response.json();
		if (!response.ok){
			throw new Error(result.errors[0].detail);
		}     
		callback(model, result);
		$(".progress-bar").css("width",`${(current_page / result.meta.response["total-pages"]) * 100}%`);
		if (current_page >= result.meta.response["total-pages"]) {
			model["total-results"] = result.meta.response["total-results"];
			model["description"] = result.meta.response.description;
			model["total-pages"] = result.meta.response["total-pages"];
			return model;
		}	
		current_page++;			
		return await getNextPage(url, callback);	
	}

	return await getNextPage(url, callback);
}
  
function updatePagination(model) {
	$('#pagination').empty();
	$('#pagination').Pagination($.extend({}, defaults, { size: model["total-results"] }), function (obj) {
		pagePublications(model, obj.page);
	});
}

function renderPage(model) {
	$("#query-description-placeholder").remove();
	$("#query-description").text(model["description"]);
	
	renderAccessibility(model);
	renderVisibilityAndSocietalImpact(model);
	renderCollaborations(model);
	renderFunders(model);
	updatePagination(model);
}

function renderPlaceholdersForPublications(totalPublicationsToShow) {
	$("#publications").empty();

	for (let index = 0; index < totalPublicationsToShow; index++) {
		$("#publications").append(`
			<div class="card mb-3" aria-hidden="true">
			<div class="card-body">
				<h5 class="card-title placeholder-glow">
					<span class="placeholder col-6"></span>
				</h5>
				<p class="card-text placeholder-glow">
					<span class="placeholder col-7"></span>
					<span class="placeholder col-4"></span>
					<span class="placeholder col-4"></span>
					<span class="placeholder col-7"></span>
					<span class="placeholder col-3 mb-2"></span>
					<span class="placeholder col-5 mb-3"></span>
					<span class="placeholder col-8 mb-3"></span>
					<span class="placeholder col-3 float-end"></span>
				</p>
			</div>
			</div>
		`);
	}
}

function renderPlaceholdersForSections(sections) {
	$("#sections").empty();

	for (let [id, title] of sections) {
		$("#sections").append(`
			<div id="${id}-placeholder" class="mb-4" aria-hidden="true">
				<h2>${title}</h2>
				<p class="card-text placeholder-glow">
					<span class="placeholder col-11"></span>
					<span class="placeholder col-6"></span>
					<span class="placeholder col-5"></span>
					<span class="placeholder col-8"></span>
				</p>
			</div>
		`);
	  }
}

async function queryExplorerThenRenderPage(url) {
	try {
		$(".progress").show();
		const model = await makePagedRequest(url, convertToPublication);
		renderPage(model);
	} catch (error) {
		alert(error);
	} finally {
		$(".progress").hide();
	}
}